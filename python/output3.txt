


def forward(self, L_a_ : torch.Tensor, L_b_ : torch.Tensor):
    l_a_ = L_a_
    l_b_ = L_b_
    getattr_1 = l_a_.T;  l_a_ = None
    truediv = getattr_1 / 2;  getattr_1 = None
    softmax = torch.nn.functional.softmax(truediv);  truediv = None
    t = torch.t(l_b_);  l_b_ = None
    add = softmax + t;  softmax = t = None
    return (add,)
    
node.target <built-in function getattr>
node.args (l_a_, 'T')
node.name getattr_1
{'source_fn_stack': [('getattr_1', <built-in function getattr>)], 'stack_trace': '  File "/Users/maggie/school/gern/python/split_pipeline_test.py", line 15, in forward\n    return torch.nn.functional.softmax(a.T / 2) + torch.t(b)\n', 'example_value': FakeTensor(..., size=(10, 10))}
SPLIT PIPELINE ARG l_a_
<class 'torch.fx.node.Node'>
RELEVANT OUTPUTS [l_a_]
RELEVANT FN CALLS set()
[]
RELEVANT OUTPUTS [l_a_]
RELEVANT FN CALLS set()
node.target <built-in function truediv>
node.args (getattr_1, 2)
node.name truediv
node.target <function softmax at 0x1095ff880>
node.args (truediv,)
node.name softmax
node.target <built-in method t of type object at 0x103e74088>
node.args (l_b_,)
node.name t
node.target <built-in function add>
node.args (softmax, t)
node.name add
{'source_fn_stack': [('add', <built-in function add>)], 'stack_trace': '  File "/Users/maggie/school/gern/python/split_pipeline_test.py", line 15, in forward\n    return torch.nn.functional.softmax(a.T / 2) + torch.t(b)\n', 'example_value': FakeTensor(..., size=(10, 10))}
SPLIT PIPELINE ARG softmax
<class 'torch.fx.node.Node'>
RELEVANT OUTPUTS [softmax]
RELEVANT FN CALLS set()
[(<gern_py.Composable object at 0x11a81d5b0>, [getattr_1, truediv_1], [getattr_1, 2], truediv), (<gern_py.Composable object at 0x10e7595f0>, [truediv], [truediv], softmax), (<gern_py.Composable object at 0x10dc7b130>, [l_b_], [l_b_], t)]
ADD INP truediv
RELEVANT OUTPUTS [softmax, truediv]
RELEVANT FN CALLS {<gern_py.Composable object at 0x10e7595f0>}
RUNNER COMPILE
[<gern_py.Composable object at 0x10e7595f0>]
FINISH COMPILING
PRINTING GM GRAPH graph():
    %l_a_ : torch.Tensor [num_users=1] = placeholder[target=L_a_]
    %l_b_ : torch.Tensor [num_users=1] = placeholder[target=L_b_]
    %getattr_1 : [num_users=1] = call_function[target=builtins.getattr](args = (%l_a_, T), kwargs = {})
    %truediv : [num_users=1] = call_function[target=operator.truediv](args = (%getattr_1, 2), kwargs = {})
    %softmax : [num_users=1] = call_function[target=torch.nn.functional.softmax](args = (%truediv,), kwargs = {})
    %t : [num_users=1] = call_function[target=torch.t](args = (%l_b_,), kwargs = {})
    %add : [num_users=1] = call_function[target=operator.add](args = (%softmax, %t), kwargs = {})
    return (add,)
PRINTING GM GRAPH graph():
    %softmax_inputs : [num_users=0] = get_attr[target=softmax_inputs]
    %softmax_out_tensor : [num_users=0] = get_attr[target=softmax_out_tensor]
    %softmax_gern_args : [num_users=0] = get_attr[target=softmax_gern_args]
    %softmax_generated_runner : [num_users=0] = get_attr[target=softmax_generated_runner]
    %l_a_ : torch.Tensor [num_users=1] = placeholder[target=L_a_]
    %l_b_ : torch.Tensor [num_users=1] = placeholder[target=L_b_]
    %getattr_1 : [num_users=1] = call_function[target=builtins.getattr](args = (%l_a_, T), kwargs = {})
    %truediv : [num_users=1] = call_function[target=operator.truediv](args = (%getattr_1, 2), kwargs = {})
    %softmax : [num_users=1] = call_function[target=torch.nn.functional.softmax](args = (%truediv,), kwargs = {})
    %t : [num_users=1] = call_function[target=torch.t](args = (%l_b_,), kwargs = {})
    %add : [num_users=1] = call_function[target=operator.add](args = (%softmax, %t), kwargs = {})
    return (add,)
RELEVANT OUTPUT NODES 2 [softmax, truediv]
graph():
    %softmax_inputs : [num_users=1] = get_attr[target=softmax_inputs]
    %softmax_out_tensor : [num_users=1] = get_attr[target=softmax_out_tensor]
    %softmax_gern_args : [num_users=1] = get_attr[target=softmax_gern_args]
    %softmax_generated_runner : [num_users=1] = get_attr[target=softmax_generated_runner]
    %l_a_ : torch.Tensor [num_users=1] = placeholder[target=L_a_]
    %l_b_ : torch.Tensor [num_users=1] = placeholder[target=L_b_]
    %getattr_1 : [num_users=1] = call_function[target=builtins.getattr](args = (%l_a_, T), kwargs = {})
    %truediv : [num_users=2] = call_function[target=operator.truediv](args = (%getattr_1, 2), kwargs = {})
    %softmax : [num_users=0] = call_function[target=torch.nn.functional.softmax](args = (%truediv,), kwargs = {})
    %replaced_softmax : [num_users=1] = call_function[target=generate_torch_compile_pipeline.function_call_fn](args = (%softmax_generated_runner, %softmax_gern_args, %softmax_out_tensor, %softmax_inputs, %truediv), kwargs = {})
    %t : [num_users=1] = call_function[target=torch.t](args = (%l_b_,), kwargs = {})
    %add : [num_users=1] = call_function[target=operator.add](args = (%replaced_softmax, %t), kwargs = {})
    return (add,)
[(<built-in function getattr>, [])]
[(<gern_py.Runner object at 0x11a850ef0>, {'l_x': <capsule object NULL at 0x11a5c49c0>, 'l_y': <capsule object NULL at 0x11a5c47b0>, 'softmax': <capsule object NULL at 0x11a5c4780>}, tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]))]
SPLIT PIPELINE ARG t
<class 'torch.fx.node.Node'>
RELEVANT OUTPUTS [t]
RELEVANT FN CALLS set()
[(<gern_py.Composable object at 0x11a81d5b0>, [getattr_1, truediv_1], [getattr_1, 2], truediv), (<gern_py.Composable object at 0x10e7595f0>, [truediv], [truediv], softmax), (<gern_py.Composable object at 0x10dc7b130>, [l_b_], [l_b_], t)]
ADD INP l_b_
RELEVANT OUTPUTS [t, l_b_]
RELEVANT FN CALLS {<gern_py.Composable object at 0x10dc7b130>}
RUNNER COMPILE
[<gern_py.Composable object at 0x10dc7b130>]
FINISH COMPILING
PRINTING GM GRAPH graph():
    %softmax_inputs : [num_users=1] = get_attr[target=softmax_inputs]
    %softmax_out_tensor : [num_users=1] = get_attr[target=softmax_out_tensor]
    %softmax_gern_args : [num_users=1] = get_attr[target=softmax_gern_args]
    %softmax_generated_runner : [num_users=1] = get_attr[target=softmax_generated_runner]
    %l_a_ : torch.Tensor [num_users=1] = placeholder[target=L_a_]
    %l_b_ : torch.Tensor [num_users=1] = placeholder[target=L_b_]
    %getattr_1 : [num_users=1] = call_function[target=builtins.getattr](args = (%l_a_, T), kwargs = {})
    %truediv : [num_users=2] = call_function[target=operator.truediv](args = (%getattr_1, 2), kwargs = {})
    %softmax : [num_users=0] = call_function[target=torch.nn.functional.softmax](args = (%truediv,), kwargs = {})
    %replaced_softmax : [num_users=1] = call_function[target=generate_torch_compile_pipeline.function_call_fn](args = (%softmax_generated_runner, %softmax_gern_args, %softmax_out_tensor, %softmax_inputs, %truediv), kwargs = {})
    %t : [num_users=1] = call_function[target=torch.t](args = (%l_b_,), kwargs = {})
    %add : [num_users=1] = call_function[target=operator.add](args = (%replaced_softmax, %t), kwargs = {})
    return (add,)
PRINTING GM GRAPH graph():
    %t_inputs : [num_users=0] = get_attr[target=t_inputs]
    %t_out_tensor : [num_users=0] = get_attr[target=t_out_tensor]
    %t_gern_args : [num_users=0] = get_attr[target=t_gern_args]
    %t_generated_runner : [num_users=0] = get_attr[target=t_generated_runner]
    %softmax_inputs : [num_users=1] = get_attr[target=softmax_inputs]
    %softmax_out_tensor : [num_users=1] = get_attr[target=softmax_out_tensor]
    %softmax_gern_args : [num_users=1] = get_attr[target=softmax_gern_args]
    %softmax_generated_runner : [num_users=1] = get_attr[target=softmax_generated_runner]
    %l_a_ : torch.Tensor [num_users=1] = placeholder[target=L_a_]
    %l_b_ : torch.Tensor [num_users=1] = placeholder[target=L_b_]
    %getattr_1 : [num_users=1] = call_function[target=builtins.getattr](args = (%l_a_, T), kwargs = {})
    %truediv : [num_users=2] = call_function[target=operator.truediv](args = (%getattr_1, 2), kwargs = {})
    %softmax : [num_users=0] = call_function[target=torch.nn.functional.softmax](args = (%truediv,), kwargs = {})
    %replaced_softmax : [num_users=1] = call_function[target=generate_torch_compile_pipeline.function_call_fn](args = (%softmax_generated_runner, %softmax_gern_args, %softmax_out_tensor, %softmax_inputs, %truediv), kwargs = {})
    %t : [num_users=1] = call_function[target=torch.t](args = (%l_b_,), kwargs = {})
    %add : [num_users=1] = call_function[target=operator.add](args = (%replaced_softmax, %t), kwargs = {})
    return (add,)
RELEVANT OUTPUT NODES 2 [t, l_b_]
graph():
    %t_inputs : [num_users=1] = get_attr[target=t_inputs]
    %t_out_tensor : [num_users=1] = get_attr[target=t_out_tensor]
    %t_gern_args : [num_users=1] = get_attr[target=t_gern_args]
    %t_generated_runner : [num_users=1] = get_attr[target=t_generated_runner]
    %softmax_inputs : [num_users=1] = get_attr[target=softmax_inputs]
    %softmax_out_tensor : [num_users=1] = get_attr[target=softmax_out_tensor]
    %softmax_gern_args : [num_users=1] = get_attr[target=softmax_gern_args]
    %softmax_generated_runner : [num_users=1] = get_attr[target=softmax_generated_runner]
    %l_a_ : torch.Tensor [num_users=1] = placeholder[target=L_a_]
    %l_b_ : torch.Tensor [num_users=2] = placeholder[target=L_b_]
    %getattr_1 : [num_users=1] = call_function[target=builtins.getattr](args = (%l_a_, T), kwargs = {})
    %truediv : [num_users=2] = call_function[target=operator.truediv](args = (%getattr_1, 2), kwargs = {})
    %softmax : [num_users=0] = call_function[target=torch.nn.functional.softmax](args = (%truediv,), kwargs = {})
    %replaced_softmax : [num_users=1] = call_function[target=generate_torch_compile_pipeline.function_call_fn](args = (%softmax_generated_runner, %softmax_gern_args, %softmax_out_tensor, %softmax_inputs, %truediv), kwargs = {})
    %t : [num_users=0] = call_function[target=torch.t](args = (%l_b_,), kwargs = {})
    %replaced_t : [num_users=1] = call_function[target=generate_torch_compile_pipeline.function_call_fn](args = (%t_generated_runner, %t_gern_args, %t_out_tensor, %t_inputs, %l_b_), kwargs = {})
    %add : [num_users=1] = call_function[target=operator.add](args = (%replaced_softmax, %replaced_t), kwargs = {})
    return (add,)
[(<built-in function getattr>, [])]
[(<gern_py.Runner object at 0x11a850ef0>, {'l_x': <capsule object NULL at 0x11a5c49c0>, 'l_y': <capsule object NULL at 0x11a5c47b0>, 'softmax': <capsule object NULL at 0x11a5c4780>}, tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])), (<gern_py.Runner object at 0x11a853270>, {'l_x': <capsule object NULL at 0x11a656310>, 'l_y': <capsule object NULL at 0x11a321a10>, 't': <capsule object NULL at 0x11a655c80>}, tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]))]



def forward(self, L_a_ : torch.Tensor, L_b_ : torch.Tensor):
    t_inputs = self.t_inputs
    t_out_tensor = self.t_out_tensor
    t_gern_args = self.t_gern_args
    t_generated_runner = self.t_generated_runner
    softmax_inputs = self.softmax_inputs
    softmax_out_tensor = self.softmax_out_tensor
    softmax_gern_args = self.softmax_gern_args
    softmax_generated_runner = self.softmax_generated_runner
    l_a_ = L_a_
    l_b_ = L_b_
    getattr_1 = l_a_.T;  l_a_ = None
    truediv = getattr_1 / 2;  getattr_1 = None
    softmax = torch.nn.functional.softmax(truediv);  softmax = None
    replaced_softmax = generate_torch_compile_pipeline_function_call_fn(softmax_generated_runner, softmax_gern_args, softmax_out_tensor, softmax_inputs, truediv);  softmax_generated_runner = softmax_gern_args = softmax_out_tensor = softmax_inputs = truediv = None
    t = torch.t(l_b_);  t = None
    replaced_t = generate_torch_compile_pipeline_function_call_fn(t_generated_runner, t_gern_args, t_out_tensor, t_inputs, l_b_);  t_generated_runner = t_gern_args = t_out_tensor = t_inputs = l_b_ = None
    add = replaced_softmax + replaced_t;  replaced_softmax = replaced_t = None
    return (add,)
    
CALLING EVALUATE
ARGS (tensor([[-0.1347, -0.2468,  0.6465,  0.1741,  0.1763, -1.1917, -0.7551,  0.2531,
         -0.0267, -0.5999],
        [-0.7020, -0.8600,  0.0329,  0.4776, -0.1248, -0.1614,  0.0349, -0.8157,
         -0.3854,  0.3464],
        [ 0.3004,  0.5888, -0.3704,  1.0343,  0.0270, -0.0022,  0.1669,  0.1402,
          1.1966, -0.4180],
        [-0.0756, -0.5810,  0.6805, -0.1464,  0.7427, -0.2522, -0.7349, -0.4030,
          0.0505, -0.2506],
        [-0.6497, -0.8711, -0.2489, -0.2650, -0.3144,  0.1642,  0.5992,  0.0949,
         -0.7893, -0.6448],
        [ 0.8083, -0.1644,  0.2974, -0.0467,  1.0934,  0.3258,  0.3875, -0.0371,
          0.6482,  0.2569],
        [ 0.7574,  0.0980, -0.2364,  0.3936,  0.6634, -0.4736, -0.9427,  0.3154,
          0.3031, -0.7922],
        [ 0.5702,  0.0458, -0.2283,  0.0400, -0.0786,  0.9809, -0.2192, -0.0780,
         -0.4857,  0.8475],
        [-0.1285, -0.1285,  0.0208, -0.2282, -0.5064,  0.0548,  0.2982,  0.1701,
          0.0548, -0.5254],
        [ 0.7497, -0.5204,  0.2514,  0.1478, -0.2080,  0.7084,  1.1507, -0.3053,
         -0.0545,  0.3680]]),)
INPUT ADT PTRS [truediv]
4492861056
{'l_x': <capsule object NULL at 0x11a5c49c0>, 'l_y': <capsule object NULL at 0x11a5c47b0>, 'softmax': <capsule object NULL at 0x11a5c4780>, 'truediv': <capsule object NULL at 0x11a495200>}
CALLING EVALUATE
ARGS (tensor([[ 0.9505,  1.3682, -1.3864, -1.0036, -1.1503, -1.7107,  0.2382,  0.7461,
         -1.2154,  0.3985],
        [-0.2544,  0.1095,  0.2445, -0.0269,  0.6014,  0.4378,  0.3522,  0.6207,
         -0.8998, -0.1103],
        [-0.6433,  0.0189, -0.0748,  0.4592,  1.3776,  0.7593,  0.5004, -0.8634,
         -1.0178,  0.3711],
        [-0.3497,  0.2665,  0.2334, -0.3961, -0.6491,  0.1791, -0.5616, -0.4947,
          1.0824,  0.6193],
        [-0.5980,  1.0858,  0.3094, -0.6206,  0.5783,  0.8209,  0.0106, -0.8931,
          0.7239, -0.2627],
        [-0.0394,  0.1867,  0.3171, -0.9757,  0.7732, -1.3940,  0.1541,  1.2309,
         -0.9476,  0.9314],
        [-0.5286,  0.2239,  1.3110,  0.8026, -0.6518, -0.2627,  0.7328, -1.4172,
         -0.4901, -1.1953],
        [-0.9093,  0.0765,  0.1435,  1.6625, -0.1692, -0.4845, -0.3580,  2.0067,
          0.8390, -1.3552],
        [-0.7947, -1.1229, -0.5670, -1.0916, -1.3135,  0.5964,  0.9545, -0.0333,
          1.6084,  1.6626],
        [ 1.1857, -0.6929,  0.3732,  0.2014,  0.0636, -1.1695, -0.5161,  2.2493,
         -1.1393,  0.0879]]),)
INPUT ADT PTRS [l_b_]
4480482816
{'l_x': <capsule object NULL at 0x11a656310>, 'l_y': <capsule object NULL at 0x11a321a10>, 't': <capsule object NULL at 0x11a655c80>, 'l_b_': <capsule object NULL at 0x11a495200>}
REUSING GENERATED RUNNER
CALLING EVALUATE
ARGS (tensor([[-0.1347, -0.2468,  0.6465,  0.1741,  0.1763, -1.1917, -0.7551,  0.2531,
         -0.0267, -0.5999],
        [-0.7020, -0.8600,  0.0329,  0.4776, -0.1248, -0.1614,  0.0349, -0.8157,
         -0.3854,  0.3464],
        [ 0.3004,  0.5888, -0.3704,  1.0343,  0.0270, -0.0022,  0.1669,  0.1402,
          1.1966, -0.4180],
        [-0.0756, -0.5810,  0.6805, -0.1464,  0.7427, -0.2522, -0.7349, -0.4030,
          0.0505, -0.2506],
        [-0.6497, -0.8711, -0.2489, -0.2650, -0.3144,  0.1642,  0.5992,  0.0949,
         -0.7893, -0.6448],
        [ 0.8083, -0.1644,  0.2974, -0.0467,  1.0934,  0.3258,  0.3875, -0.0371,
          0.6482,  0.2569],
        [ 0.7574,  0.0980, -0.2364,  0.3936,  0.6634, -0.4736, -0.9427,  0.3154,
          0.3031, -0.7922],
        [ 0.5702,  0.0458, -0.2283,  0.0400, -0.0786,  0.9809, -0.2192, -0.0780,
         -0.4857,  0.8475],
        [-0.1285, -0.1285,  0.0208, -0.2282, -0.5064,  0.0548,  0.2982,  0.1701,
          0.0548, -0.5254],
        [ 0.7497, -0.5204,  0.2514,  0.1478, -0.2080,  0.7084,  1.1507, -0.3053,
         -0.0545,  0.3680]]),)
INPUT ADT PTRS [truediv]
4492861056
{'l_x': <capsule object NULL at 0x11a5c49c0>, 'l_y': <capsule object NULL at 0x11a5c47b0>, 'softmax': <capsule object NULL at 0x11a5c4780>, 'truediv': <capsule object NULL at 0x11a5c48a0>}
CALLING EVALUATE
ARGS (tensor([[ 0.9505,  1.3682, -1.3864, -1.0036, -1.1503, -1.7107,  0.2382,  0.7461,
         -1.2154,  0.3985],
        [-0.2544,  0.1095,  0.2445, -0.0269,  0.6014,  0.4378,  0.3522,  0.6207,
         -0.8998, -0.1103],
        [-0.6433,  0.0189, -0.0748,  0.4592,  1.3776,  0.7593,  0.5004, -0.8634,
         -1.0178,  0.3711],
        [-0.3497,  0.2665,  0.2334, -0.3961, -0.6491,  0.1791, -0.5616, -0.4947,
          1.0824,  0.6193],
        [-0.5980,  1.0858,  0.3094, -0.6206,  0.5783,  0.8209,  0.0106, -0.8931,
          0.7239, -0.2627],
        [-0.0394,  0.1867,  0.3171, -0.9757,  0.7732, -1.3940,  0.1541,  1.2309,
         -0.9476,  0.9314],
        [-0.5286,  0.2239,  1.3110,  0.8026, -0.6518, -0.2627,  0.7328, -1.4172,
         -0.4901, -1.1953],
        [-0.9093,  0.0765,  0.1435,  1.6625, -0.1692, -0.4845, -0.3580,  2.0067,
          0.8390, -1.3552],
        [-0.7947, -1.1229, -0.5670, -1.0916, -1.3135,  0.5964,  0.9545, -0.0333,
          1.6084,  1.6626],
        [ 1.1857, -0.6929,  0.3732,  0.2014,  0.0636, -1.1695, -0.5161,  2.2493,
         -1.1393,  0.0879]]),)
INPUT ADT PTRS [l_b_]
4480482816
{'l_x': <capsule object NULL at 0x11a656310>, 'l_y': <capsule object NULL at 0x11a321a10>, 't': <capsule object NULL at 0x11a655c80>, 'l_b_': <capsule object NULL at 0x11a5c48a0>}
OPT OUTPUT tensor([[ 1.0161, -0.2172, -0.5419, -0.2801, -0.5587,  0.1292, -0.3684, -0.7764,
         -0.7286,  1.3447],
        [ 1.4057,  0.2117,  0.0891,  0.3061,  1.2556,  0.3480,  0.3577,  0.1431,
         -0.9627, -0.6337],
        [-1.2837,  0.3151, -0.0351,  0.4041,  0.4716,  0.4517,  1.3779,  0.3045,
         -0.5075,  0.4054],
        [-0.9354,  0.0115,  0.6243, -0.2393, -0.4905, -0.9111,  0.9583,  1.7200,
         -1.0605,  0.3339],
        [-1.1109,  0.7711,  1.5388, -0.5154,  0.6448,  0.9332, -0.5927, -0.1372,
         -1.1773,  0.1059],
        [-1.5398,  0.6003,  0.8941,  0.2461,  0.9821, -1.3344, -0.2305, -0.3472,
          0.6390, -1.1376],
        [ 0.4200,  0.5029,  0.5753, -0.3811,  0.0773,  0.1901,  0.8864, -0.3103,
          0.9902, -0.4438],
        [ 0.9114,  0.7029, -0.6656, -0.4217, -0.8536,  1.3993, -1.3649,  2.0458,
          0.0460,  2.3524],
        [-1.1273, -0.6877, -0.9395,  1.1248,  0.9045, -0.8915, -0.4482,  0.9241,
          1.7189, -1.0343],
        [ 0.6106, -0.0320,  0.4135,  0.7999, -0.2066,  0.9733, -1.1102, -1.2447,
          1.7675,  0.1760]])
REF OUTPUT tensor([[ 1.0161, -0.2172, -0.5419, -0.2801, -0.5587,  0.1292, -0.3684, -0.7764,
         -0.7286,  1.3447],
        [ 1.4057,  0.2117,  0.0891,  0.3061,  1.2556,  0.3480,  0.3577,  0.1431,
         -0.9627, -0.6337],
        [-1.2837,  0.3151, -0.0351,  0.4041,  0.4716,  0.4517,  1.3779,  0.3045,
         -0.5075,  0.4054],
        [-0.9354,  0.0115,  0.6243, -0.2393, -0.4905, -0.9111,  0.9583,  1.7200,
         -1.0605,  0.3339],
        [-1.1109,  0.7711,  1.5388, -0.5154,  0.6448,  0.9332, -0.5927, -0.1372,
         -1.1773,  0.1059],
        [-1.5398,  0.6003,  0.8941,  0.2461,  0.9821, -1.3344, -0.2305, -0.3472,
          0.6390, -1.1376],
        [ 0.4200,  0.5029,  0.5753, -0.3811,  0.0773,  0.1901,  0.8864, -0.3103,
          0.9902, -0.4438],
        [ 0.9114,  0.7029, -0.6656, -0.4217, -0.8536,  1.3993, -1.3649,  2.0458,
          0.0460,  2.3524],
        [-1.1273, -0.6877, -0.9395,  1.1248,  0.9045, -0.8915, -0.4482,  0.9241,
          1.7189, -1.0343],
        [ 0.6106, -0.0320,  0.4135,  0.7999, -0.2066,  0.9733, -1.1102, -1.2447,
          1.7675,  0.1760]])
REUSING GENERATED RUNNER
CALLING EVALUATE
ARGS (tensor([[-0.3480,  0.0698,  0.0991,  0.5632, -0.2040,  0.3641,  0.3560, -1.5792,
          0.0444, -0.3475],
        [ 0.1171, -0.0458,  0.3404, -0.1133, -0.3960,  0.0121, -0.2678, -0.4077,
         -0.3875,  0.5587],
        [ 0.5133, -0.0562,  0.6322, -0.1783,  0.3013,  0.2446,  0.0225, -0.9404,
         -0.5604, -0.0880],
        [-0.2714, -0.5671, -0.8473,  0.0647,  0.5544, -0.1582, -0.0543, -0.4142,
          0.2568, -0.2093],
        [-0.2331, -0.2287, -1.0081,  0.1943, -0.5956,  0.3881,  0.1333, -0.0949,
          0.4403,  0.3587],
        [ 0.2976, -0.7001, -0.4665, -0.1354,  0.3566,  1.1003, -0.8931,  0.1080,
         -0.0594,  0.6605],
        [ 0.3747, -0.1718,  0.0906, -0.3428, -0.1023,  0.0585, -0.1802,  0.5276,
         -0.2760, -0.0392],
        [ 0.0519,  0.3951, -0.1774, -0.9390, -0.7550,  0.3492,  0.7296, -0.6677,
         -0.0797, -1.0435],
        [-0.5628, -0.5679, -0.4150, -0.1084,  0.2649, -0.5035, -0.3719,  0.1592,
          0.4542, -0.9196],
        [ 0.3391,  0.2527,  0.7188, -0.9732, -0.5415, -0.3635,  0.5969,  0.8073,
          0.3161,  0.0326]]),)
INPUT ADT PTRS [truediv]
4738578048
{'l_x': <capsule object NULL at 0x11a5c49c0>, 'l_y': <capsule object NULL at 0x11a5c47b0>, 'softmax': <capsule object NULL at 0x11a5c4780>, 'truediv': <capsule object NULL at 0x11a2aacd0>}
CALLING EVALUATE
ARGS (tensor([[ 1.8898, -1.3483,  0.1754,  0.2273, -0.5095,  0.3863,  1.5214,  1.3411,
         -1.3321, -0.3393],
        [ 0.2686, -2.0864,  0.4681,  0.2731,  1.0920, -0.2376,  0.4686, -1.2120,
         -0.3274,  0.3250],
        [ 1.1793, -1.5903, -0.4560, -0.2429, -0.1140, -0.7230, -0.8728, -0.7650,
          1.0979,  1.2336],
        [ 0.2615,  0.2406, -1.0280, -0.2970, -0.5234, -0.1244,  0.2286,  0.1333,
          1.2955,  0.6493],
        [-0.4519, -1.2913,  0.6671, -0.4365, -1.5339, -1.6891, -0.6522,  0.0329,
          0.7655, -1.4748],
        [ 0.4915,  0.5718, -1.6872, -0.2776,  0.3361, -1.6947,  0.4438,  0.2400,
          0.8328, -0.0725],
        [ 0.1184, -0.4338,  0.2577, -1.8277, -0.9669, -0.0833, -0.5804,  2.1720,
         -0.7642, -0.3179],
        [ 0.4210,  0.5733,  1.8591,  0.1761, -0.4332, -0.1794,  0.3029, -1.5055,
         -0.3392,  2.0319],
        [-0.0514, -0.0720,  2.3769,  1.5378, -0.4961, -1.5589,  0.3804, -0.7760,
          0.2397, -0.6236],
        [ 0.2125, -1.1192,  1.6372, -0.3999, -1.1449, -0.2783,  0.0329, -0.3477,
          0.5681,  0.1777]]),)
INPUT ADT PTRS [l_b_]
4492871232
{'l_x': <capsule object NULL at 0x11a656310>, 'l_y': <capsule object NULL at 0x11a321a10>, 't': <capsule object NULL at 0x11a655c80>, 'l_b_': <capsule object NULL at 0x11a5c4840>}
OPT_OUTPUT 2 tensor([[ 1.9547e+00,  3.7194e-01,  1.3328e+00,  3.3156e-01, -3.7910e-01,
          6.1520e-01,  2.5208e-01,  5.1778e-01,  9.2650e-04,  3.4148e-01],
        [-1.2483e+00, -1.9378e+00, -1.5226e+00,  3.1105e-01, -1.1716e+00,
          7.0105e-01, -3.4016e-01,  6.2394e-01,  5.2784e-02, -1.0239e+00],
        [ 3.2619e-01,  5.3693e-01, -3.8450e-01, -9.0648e-01,  7.9841e-01,
         -1.5921e+00,  3.0913e-01,  1.9858e+00,  2.4737e+00,  1.7234e+00],
        [ 3.0091e-01,  3.4954e-01, -1.1284e-01, -1.5653e-01, -3.3480e-01,
         -2.2257e-01, -1.6922e+00,  2.7961e-01,  1.6300e+00, -3.0861e-01],
        [-4.3153e-01,  1.2246e+00,  2.9173e-02, -4.1975e-01, -1.4778e+00,
          4.7425e-01, -8.6134e-01, -3.3913e-01, -4.0300e-01, -1.0891e+00],
        [ 5.1876e-01, -9.4527e-02, -6.1937e-01, -6.8364e-02, -1.5510e+00,
         -1.5892e+00,  1.0712e-02, -8.6385e-02, -1.5031e+00, -2.0004e-01],
        [ 1.6775e+00,  5.8172e-01, -8.1166e-01,  3.7931e-01, -5.3704e-01,
          5.4634e-01, -4.7894e-01,  3.6377e-01,  4.6581e-01,  8.6182e-02],
        [ 1.4621e+00, -1.1465e+00, -6.0365e-01,  2.5653e-01,  1.4264e-01,
          3.4860e-01,  2.2372e+00, -1.4141e+00, -7.1894e-01, -2.5091e-01],
        [-1.2697e+00, -1.7367e-01,  1.2153e+00,  1.4001e+00,  8.6900e-01,
          8.9492e-01, -6.7713e-01, -2.8486e-01,  3.3187e-01,  7.3067e-01],
        [-1.8556e-01,  4.4245e-01,  1.3383e+00,  7.5284e-01, -1.4127e+00,
          1.4607e-02, -2.6350e-01,  2.1241e+00, -4.6100e-01,  2.3977e-01]])
REUSING GENERATED RUNNER
CALLING EVALUATE
ARGS (tensor([[-0.3480,  0.0698,  0.0991,  0.5632, -0.2040,  0.3641,  0.3560, -1.5792,
          0.0444, -0.3475],
        [ 0.1171, -0.0458,  0.3404, -0.1133, -0.3960,  0.0121, -0.2678, -0.4077,
         -0.3875,  0.5587],
        [ 0.5133, -0.0562,  0.6322, -0.1783,  0.3013,  0.2446,  0.0225, -0.9404,
         -0.5604, -0.0880],
        [-0.2714, -0.5671, -0.8473,  0.0647,  0.5544, -0.1582, -0.0543, -0.4142,
          0.2568, -0.2093],
        [-0.2331, -0.2287, -1.0081,  0.1943, -0.5956,  0.3881,  0.1333, -0.0949,
          0.4403,  0.3587],
        [ 0.2976, -0.7001, -0.4665, -0.1354,  0.3566,  1.1003, -0.8931,  0.1080,
         -0.0594,  0.6605],
        [ 0.3747, -0.1718,  0.0906, -0.3428, -0.1023,  0.0585, -0.1802,  0.5276,
         -0.2760, -0.0392],
        [ 0.0519,  0.3951, -0.1774, -0.9390, -0.7550,  0.3492,  0.7296, -0.6677,
         -0.0797, -1.0435],
        [-0.5628, -0.5679, -0.4150, -0.1084,  0.2649, -0.5035, -0.3719,  0.1592,
          0.4542, -0.9196],
        [ 0.3391,  0.2527,  0.7188, -0.9732, -0.5415, -0.3635,  0.5969,  0.8073,
          0.3161,  0.0326]]),)
INPUT ADT PTRS [truediv]
4500974720
{'l_x': <capsule object NULL at 0x11a5c49c0>, 'l_y': <capsule object NULL at 0x11a5c47b0>, 'softmax': <capsule object NULL at 0x11a5c4780>, 'truediv': <capsule object NULL at 0x11a656790>}
CALLING EVALUATE
ARGS (tensor([[ 1.8898, -1.3483,  0.1754,  0.2273, -0.5095,  0.3863,  1.5214,  1.3411,
         -1.3321, -0.3393],
        [ 0.2686, -2.0864,  0.4681,  0.2731,  1.0920, -0.2376,  0.4686, -1.2120,
         -0.3274,  0.3250],
        [ 1.1793, -1.5903, -0.4560, -0.2429, -0.1140, -0.7230, -0.8728, -0.7650,
          1.0979,  1.2336],
        [ 0.2615,  0.2406, -1.0280, -0.2970, -0.5234, -0.1244,  0.2286,  0.1333,
          1.2955,  0.6493],
        [-0.4519, -1.2913,  0.6671, -0.4365, -1.5339, -1.6891, -0.6522,  0.0329,
          0.7655, -1.4748],
        [ 0.4915,  0.5718, -1.6872, -0.2776,  0.3361, -1.6947,  0.4438,  0.2400,
          0.8328, -0.0725],
        [ 0.1184, -0.4338,  0.2577, -1.8277, -0.9669, -0.0833, -0.5804,  2.1720,
         -0.7642, -0.3179],
        [ 0.4210,  0.5733,  1.8591,  0.1761, -0.4332, -0.1794,  0.3029, -1.5055,
         -0.3392,  2.0319],
        [-0.0514, -0.0720,  2.3769,  1.5378, -0.4961, -1.5589,  0.3804, -0.7760,
          0.2397, -0.6236],
        [ 0.2125, -1.1192,  1.6372, -0.3999, -1.1449, -0.2783,  0.0329, -0.3477,
          0.5681,  0.1777]]),)
INPUT ADT PTRS [l_b_]
4492871232
{'l_x': <capsule object NULL at 0x11a656310>, 'l_y': <capsule object NULL at 0x11a321a10>, 't': <capsule object NULL at 0x11a655c80>, 'l_b_': <capsule object NULL at 0x11a656790>}
REF OUTPUT 2 tensor([[ 1.9547e+00,  3.7194e-01,  1.3328e+00,  3.3156e-01, -3.7910e-01,
          6.1520e-01,  2.5208e-01,  5.1778e-01,  9.2650e-04,  3.4148e-01],
        [-1.2483e+00, -1.9378e+00, -1.5226e+00,  3.1105e-01, -1.1716e+00,
          7.0105e-01, -3.4016e-01,  6.2394e-01,  5.2784e-02, -1.0239e+00],
        [ 3.2619e-01,  5.3693e-01, -3.8450e-01, -9.0648e-01,  7.9841e-01,
         -1.5921e+00,  3.0913e-01,  1.9858e+00,  2.4737e+00,  1.7234e+00],
        [ 3.0091e-01,  3.4954e-01, -1.1284e-01, -1.5653e-01, -3.3480e-01,
         -2.2257e-01, -1.6922e+00,  2.7961e-01,  1.6300e+00, -3.0861e-01],
        [-4.3153e-01,  1.2246e+00,  2.9173e-02, -4.1975e-01, -1.4778e+00,
          4.7425e-01, -8.6134e-01, -3.3913e-01, -4.0300e-01, -1.0891e+00],
        [ 5.1876e-01, -9.4527e-02, -6.1937e-01, -6.8364e-02, -1.5510e+00,
         -1.5892e+00,  1.0712e-02, -8.6385e-02, -1.5031e+00, -2.0004e-01],
        [ 1.6775e+00,  5.8172e-01, -8.1166e-01,  3.7931e-01, -5.3704e-01,
          5.4634e-01, -4.7894e-01,  3.6377e-01,  4.6581e-01,  8.6182e-02],
        [ 1.4621e+00, -1.1465e+00, -6.0365e-01,  2.5653e-01,  1.4264e-01,
          3.4860e-01,  2.2372e+00, -1.4141e+00, -7.1894e-01, -2.5091e-01],
        [-1.2697e+00, -1.7367e-01,  1.2153e+00,  1.4001e+00,  8.6900e-01,
          8.9492e-01, -6.7713e-01, -2.8486e-01,  3.3187e-01,  7.3067e-01],
        [-1.8556e-01,  4.4245e-01,  1.3383e+00,  7.5284e-01, -1.4127e+00,
          1.4607e-02, -2.6350e-01,  2.1241e+00, -4.6100e-01,  2.3977e-01]])
